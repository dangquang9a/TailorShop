// Code generated by sqlc. DO NOT EDIT.
// source: products_type.sql

package db

import (
	"context"
)

const createProductsType = `-- name: CreateProductsType :one
INSERT INTO products_type (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) CreateProductsType(ctx context.Context, name string) (ProductsType, error) {
	row := q.db.QueryRowContext(ctx, createProductsType, name)
	var i ProductsType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteProductsType = `-- name: DeleteProductsType :exec
DELETE FROM products_type
WHERE id = $1
`

func (q *Queries) DeleteProductsType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductsType, id)
	return err
}

const getProductsType = `-- name: GetProductsType :one
SELECT id, name FROM products_type
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductsType(ctx context.Context, id int32) (ProductsType, error) {
	row := q.db.QueryRowContext(ctx, getProductsType, id)
	var i ProductsType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listProductsTypes = `-- name: ListProductsTypes :many
SELECT id, name FROM products_type
ORDER BY name
`

func (q *Queries) ListProductsTypes(ctx context.Context) ([]ProductsType, error) {
	rows, err := q.db.QueryContext(ctx, listProductsTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsType
	for rows.Next() {
		var i ProductsType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
