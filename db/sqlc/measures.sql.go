// Code generated by sqlc. DO NOT EDIT.
// source: measures.sql

package db

import (
	"context"
)

const createMeasure = `-- name: CreateMeasure :one
INSERT INTO measures (
  customer_id, name, number
) VALUES (
  $1, $2, $3
)
RETURNING id, customer_id, name, number
`

type CreateMeasureParams struct {
	CustomerID int64  `json:"customerID"`
	Name       string `json:"name"`
	Number     string `json:"number"`
}

func (q *Queries) CreateMeasure(ctx context.Context, arg CreateMeasureParams) (Measure, error) {
	row := q.db.QueryRowContext(ctx, createMeasure, arg.CustomerID, arg.Name, arg.Number)
	var i Measure
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Name,
		&i.Number,
	)
	return i, err
}

const deleteMeasureByCustomerID = `-- name: DeleteMeasureByCustomerID :exec
DELETE FROM measures
WHERE customer_id = $1
`

func (q *Queries) DeleteMeasureByCustomerID(ctx context.Context, customerID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMeasureByCustomerID, customerID)
	return err
}

const deleteMeasureByID = `-- name: DeleteMeasureByID :exec
DELETE FROM measures
WHERE id = $1
`

func (q *Queries) DeleteMeasureByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMeasureByID, id)
	return err
}

const getMeasureByCustomerID = `-- name: GetMeasureByCustomerID :many
SELECT id, customer_id, name, number FROM measures
WHERE customer_id = $3
LIMIT $1
OFFSET $2
`

type GetMeasureByCustomerIDParams struct {
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
	CustomerID int64 `json:"customerID"`
}

func (q *Queries) GetMeasureByCustomerID(ctx context.Context, arg GetMeasureByCustomerIDParams) ([]Measure, error) {
	rows, err := q.db.QueryContext(ctx, getMeasureByCustomerID, arg.Limit, arg.Offset, arg.CustomerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Measure
	for rows.Next() {
		var i Measure
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Name,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMeasureByID = `-- name: GetMeasureByID :one
SELECT id, customer_id, name, number FROM measures
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMeasureByID(ctx context.Context, id int32) (Measure, error) {
	row := q.db.QueryRowContext(ctx, getMeasureByID, id)
	var i Measure
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Name,
		&i.Number,
	)
	return i, err
}

const listmeasures = `-- name: Listmeasures :many
SELECT id, customer_id, name, number FROM measures
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListmeasuresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Listmeasures(ctx context.Context, arg ListmeasuresParams) ([]Measure, error) {
	rows, err := q.db.QueryContext(ctx, listmeasures, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Measure
	for rows.Next() {
		var i Measure
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Name,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeasureNumber = `-- name: UpdateMeasureNumber :one
UPDATE measures SET number = $2
WHERE id = $1
RETURNING id, customer_id, name, number
`

type UpdateMeasureNumberParams struct {
	ID     int32  `json:"id"`
	Number string `json:"number"`
}

func (q *Queries) UpdateMeasureNumber(ctx context.Context, arg UpdateMeasureNumberParams) (Measure, error) {
	row := q.db.QueryRowContext(ctx, updateMeasureNumber, arg.ID, arg.Number)
	var i Measure
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Name,
		&i.Number,
	)
	return i, err
}
