// Code generated by sqlc. DO NOT EDIT.
// source: customers.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO Customers (
  full_name, address, phone_number
) VALUES (
  $1, $2, $3
)
RETURNING id, full_name, created_at, address, phone_number
`

type CreateCustomerParams struct {
	FullName    sql.NullString `json:"fullName"`
	Address     sql.NullString `json:"address"`
	PhoneNumber sql.NullString `json:"phoneNumber"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.FullName, arg.Address, arg.PhoneNumber)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.Address,
		&i.PhoneNumber,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM Customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, full_name, created_at, address, phone_number FROM customers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.Address,
		&i.PhoneNumber,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, full_name, created_at, address, phone_number FROM Customers
ORDER BY full_name
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.CreatedAt,
			&i.Address,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
